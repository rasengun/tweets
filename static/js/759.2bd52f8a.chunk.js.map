{"version":3,"file":"static/js/759.2bd52f8a.chunk.js","mappings":"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","sources":["webpack://tweets/./src/components/TweetCard/tweetsCard.module.css?639d","components/TweetCard/TweetCard.jsx","components/Filter/CustomCheckBox.jsx","components/Filter/options.js","webpack://tweets/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","shared/services/tweets-api.js","components/redux/Filter/selector.js","webpack://tweets/./src/components/TweetsList/tweetslist.module.css?f1fb","components/TweetsList/TweetsList.jsx","pages/Tweets/Tweets.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tweetsCard_container__1QR1u\",\"logo\":\"tweetsCard_logo__0RuRy\",\"design\":\"tweetsCard_design__EfyUV\",\"line\":\"tweetsCard_line__nn9s-\",\"user\":\"tweetsCard_user__9AHEg\",\"tweets\":\"tweetsCard_tweets__mLHT5\",\"followers\":\"tweetsCard_followers__oN1Fo\",\"button\":\"tweetsCard_button__AdH5L\",\"active\":\"tweetsCard_active__Z5P5k\"};","import logo from \"../../images/logo.png\";\r\nimport card from \"../../images/card.png\";\r\n\r\nimport s from \"./tweetsCard.module.css\";\r\n\r\nexport const TweetCard = ({ tweet, handleFollow }) => {\r\n  return (\r\n    <li>\r\n      <div className={s.container}>\r\n        <img src={logo} alt=\"logo\" className={s.logo} />\r\n        <div>\r\n          <img src={card} alt=\"card\" className={s.design} />\r\n          <div className={s.line}></div>\r\n          <img src={tweet.avatar} alt=\"user\" className={s.user} />\r\n          <p className={s.tweets}>{tweet.tweets} TWEETS</p>\r\n          <p className={s.followers}>\r\n            {tweet.followers.toLocaleString(\"en-US\")} FOLLOWERS\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleFollow}\r\n            className={tweet.isFollowing ? `${s.button} ${s.active}` : s.button}\r\n          >\r\n            {tweet.isFollowing ? \"Following\" : \"Follow\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n","const RadioButtons = ({ options, selectedOption, handleOptionSelect }) => {\r\n  return (\r\n    <div>\r\n      {options.map((option) => (\r\n        <li key={option.value}>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value={option.value}\r\n              checked={selectedOption === option.value}\r\n              onChange={() => handleOptionSelect(option.value)}\r\n            />\r\n            <span>{option.label}</span>\r\n          </label>\r\n        </li>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n","export const options = [\r\n  { value: \"show all\", label: \"show all\" },\r\n  { value: \"follow\", label: \"follow\" },\r\n  { value: \"followings\", label: \"followings\" },\r\n];\r\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"filter_link__yb3ls\"};","import { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport RadioButtons from \"./CustomCheckBox\";\r\nimport { setFilterOption } from \"../redux/Filter/filterSlice\";\r\nimport { options } from \"./options\";\r\n\r\nimport s from \"./filter.module.css\";\r\n\r\nconst Filter = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState(\"show all\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilterOption(selectedOption));\r\n  }, [dispatch, selectedOption]);\r\n\r\n  const handleFilterClick = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleOptionSelect = (option) => {\r\n    if (selectedOption === option) {\r\n      setSelectedOption(\"\");\r\n    } else {\r\n      setSelectedOption(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button type=\"button\" onClick={handleFilterClick} className={s.link}>\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {isOpen && (\r\n        <div>\r\n          <RadioButtons\r\n            options={options}\r\n            selectedOption={selectedOption}\r\n            handleOptionSelect={handleOptionSelect}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import axios from \"axios\";\r\n\r\nconst tweetsInstance = axios.create({\r\n  baseURL: \"https://6403694af61d96ac487f1c15.mockapi.io/api/tweets\",\r\n});\r\n\r\nexport const fetchTweets = async (setTweets) => {\r\n  try {\r\n    const response = await tweetsInstance.get(\"/\");\r\n\r\n    const savedTweets = JSON.parse(localStorage.getItem(\"tweets\"));\r\n\r\n    if (savedTweets) {\r\n      setTweets(savedTweets);\r\n    } else {\r\n      setTweets(response.data);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","export const getFilter = ({ filter }) => filter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tweetslist_container__sh1bA\",\"button\":\"tweetslist_button__0TSn7\",\"btnLoad\":\"tweetslist_btnLoad__c6b8d\"};","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { TweetCard } from \"../TweetCard/TweetCard\";\r\nimport Filter from \"../Filter\";\r\n\r\nimport { fetchTweets } from \"./../../shared/services/tweets-api\";\r\n\r\nimport { getFilter } from \"../redux/Filter/selector\";\r\n\r\nimport s from \"./tweetslist.module.css\";\r\n\r\nexport const TweetsList = () => {\r\n  const [tweets, setTweets] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [tweetsPerPage] = useState(3);\r\n  const { filterOption } = useSelector(getFilter);\r\n\r\n  useEffect(() => {\r\n    fetchTweets(setTweets);\r\n\r\n    if (currentPage > 1) {\r\n      window.scrollTo({\r\n        top: document.documentElement.scrollHeight,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [currentPage]);\r\n\r\n  const totalTweets = tweets.length;\r\n  const lastPage = Math.ceil(totalTweets / tweetsPerPage);\r\n\r\n  const handleLoadMore = () => {\r\n    const nextPage = currentPage + 1;\r\n    setCurrentPage(nextPage);\r\n  };\r\n\r\n  const showLoadMoreButton = currentPage < lastPage;\r\n\r\n  const visibleTweets = tweets.slice(0, currentPage * tweetsPerPage);\r\n\r\n  const handleFollow = (tweetId, setTweets) => {\r\n    setTweets((prevTweets) => {\r\n      const updatedTweets = prevTweets.map((tweet) =>\r\n        tweet.id === tweetId\r\n          ? {\r\n              ...tweet,\r\n              isFollowing: !tweet.isFollowing,\r\n              followers: tweet.isFollowing\r\n                ? tweet.followers - 1\r\n                : tweet.followers + 1,\r\n            }\r\n          : tweet\r\n      );\r\n      localStorage.setItem(\"tweets\", JSON.stringify(updatedTweets));\r\n      return updatedTweets;\r\n    });\r\n  };\r\n\r\n  const filteredTweets = visibleTweets.filter((tweet) => {\r\n    if (filterOption === \"show all\") {\r\n      return true;\r\n    } else if (filterOption === \"followings\") {\r\n      return tweet.isFollowing;\r\n    } else if (filterOption === \"follow\") {\r\n      return !tweet.isFollowing;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Filter />\r\n      <ul className={s.container}>\r\n        {filteredTweets.map((tweet) => (\r\n          <TweetCard\r\n            key={tweet.id}\r\n            tweet={tweet}\r\n            handleFollow={() => handleFollow(tweet.id, setTweets)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      {showLoadMoreButton && (\r\n        <button onClick={handleLoadMore}>LOAD MORE</button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { TweetsList } from \"../../components/TweetsList/TweetsList\";\r\n\r\nconst Tweets = () => {\r\n  return <TweetsList />;\r\n};\r\n\r\nexport default Tweets;\r\n"],"names":["TweetCard","_ref","tweet","handleFollow","_jsx","children","_jsxs","className","s","src","alt","card","avatar","tweets","followers","toLocaleString","type","onClick","isFollowing","concat","options","selectedOption","handleOptionSelect","map","option","value","checked","onChange","label","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","_useState3","_useState4","setSelectedOption","dispatch","useDispatch","useEffect","setFilterOption","RadioButtons","tweetsInstance","axios","create","baseURL","fetchTweets","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setTweets","response","savedTweets","wrap","_context","prev","next","get","sent","JSON","parse","localStorage","getItem","data","t0","console","log","stop","_x","apply","arguments","getFilter","filter","TweetsList","currentPage","setCurrentPage","_useState5","tweetsPerPage","filterOption","useSelector","window","scrollTo","top","document","documentElement","scrollHeight","behavior","totalTweets","length","lastPage","Math","ceil","showLoadMoreButton","visibleTweets","slice","filteredTweets","_Fragment","Filter","tweetId","prevTweets","updatedTweets","id","_objectSpread","setItem","stringify"],"sourceRoot":""}